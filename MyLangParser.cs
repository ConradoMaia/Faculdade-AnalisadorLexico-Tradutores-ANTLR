//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MyLangParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MyLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PROGRAM=1, VAR=2, BEGIN=3, END=4, IF=5, THEN=6, ELSE=7, WHILE=8, DO=9, 
		FOR=10, TO=11, PRINT=12, INTEGER=13, REAL_T=14, STRING_T=15, BOOLEAN=16, 
		INT=17, REAL=18, STRING=19, ID=20, ASSIGN=21, PLUS=22, MINUS=23, MUL=24, 
		DIV=25, EQ=26, NEQ=27, LT=28, LE=29, GT=30, GE=31, INCREMENT=32, DECREMENT=33, 
		QUESTION=34, COLON=35, SEMI=36, COMMA=37, DOT=38, LPAREN=39, RPAREN=40, 
		WS=41, COMMENT=42, LINECOMMENT=43;
	public const int
		RULE_program = 0, RULE_block = 1, RULE_varDecl = 2, RULE_type = 3, RULE_stmt = 4, 
		RULE_assignStmt = 5, RULE_incStmt = 6, RULE_decStmt = 7, RULE_ifStmt = 8, 
		RULE_whileStmt = 9, RULE_forStmt = 10, RULE_printStmt = 11, RULE_blockStmt = 12, 
		RULE_expr = 13;
	public static readonly string[] ruleNames = {
		"program", "block", "varDecl", "type", "stmt", "assignStmt", "incStmt", 
		"decStmt", "ifStmt", "whileStmt", "forStmt", "printStmt", "blockStmt", 
		"expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'program'", "'var'", "'begin'", "'end'", "'if'", "'then'", "'else'", 
		"'while'", "'do'", "'for'", "'to'", "'print'", "'integer'", "'real'", 
		"'string'", "'boolean'", null, null, null, null, "':='", "'+'", "'-'", 
		"'*'", "'/'", "'='", "'<>'", "'<'", "'<='", "'>'", "'>='", "'++'", "'--'", 
		"'?'", "':'", "';'", "','", "'.'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PROGRAM", "VAR", "BEGIN", "END", "IF", "THEN", "ELSE", "WHILE", 
		"DO", "FOR", "TO", "PRINT", "INTEGER", "REAL_T", "STRING_T", "BOOLEAN", 
		"INT", "REAL", "STRING", "ID", "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", 
		"EQ", "NEQ", "LT", "LE", "GT", "GE", "INCREMENT", "DECREMENT", "QUESTION", 
		"COLON", "SEMI", "COMMA", "DOT", "LPAREN", "RPAREN", "WS", "COMMENT", 
		"LINECOMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyLangParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MyLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MyLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MyLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(MyLangParser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MyLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyLangParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MyLangParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MyLangParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			Match(PROGRAM);
			State = 29;
			Match(ID);
			State = 30;
			Match(SEMI);
			State = 31;
			block();
			State = 32;
			Match(DOT);
			State = 33;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1053996L) != 0)) {
				{
				State = 37;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VAR:
					{
					State = 35;
					varDecl();
					}
					break;
				case BEGIN:
				case IF:
				case WHILE:
				case FOR:
				case PRINT:
				case ID:
					{
					State = 36;
					stmt();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(MyLangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MyLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyLangParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyLangParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(VAR);
			State = 43;
			Match(ID);
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 44;
				Match(COLON);
				State = 45;
				type();
				}
			}

			State = 48;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MyLangParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_T() { return GetToken(MyLangParser.REAL_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_T() { return GetToken(MyLangParser.STRING_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(MyLangParser.BOOLEAN, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 122880L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignStmtContext assignStmt() {
			return GetRuleContext<AssignStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncStmtContext incStmt() {
			return GetRuleContext<IncStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecStmtContext decStmt() {
			return GetRuleContext<DecStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStmtContext whileStmt() {
			return GetRuleContext<WhileStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStmtContext blockStmt() {
			return GetRuleContext<BlockStmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_stmt);
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				assignStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 53;
				incStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 54;
				decStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 55;
				ifStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 56;
				whileStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 57;
				forStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 58;
				printStmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 59;
				blockStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MyLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyLangParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyLangParser.SEMI, 0); }
		public AssignStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterAssignStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitAssignStmt(this);
		}
	}

	[RuleVersion(0)]
	public AssignStmtContext assignStmt() {
		AssignStmtContext _localctx = new AssignStmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(ID);
			State = 63;
			Match(ASSIGN);
			State = 64;
			expr(0);
			State = 65;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MyLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(MyLangParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyLangParser.SEMI, 0); }
		public IncStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterIncStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitIncStmt(this);
		}
	}

	[RuleVersion(0)]
	public IncStmtContext incStmt() {
		IncStmtContext _localctx = new IncStmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_incStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(ID);
			State = 68;
			Match(INCREMENT);
			State = 69;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MyLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(MyLangParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyLangParser.SEMI, 0); }
		public DecStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterDecStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitDecStmt(this);
		}
	}

	[RuleVersion(0)]
	public DecStmtContext decStmt() {
		DecStmtContext _localctx = new DecStmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_decStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(ID);
			State = 72;
			Match(DECREMENT);
			State = 73;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MyLangParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MyLangParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MyLangParser.ELSE, 0); }
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(IF);
			State = 76;
			expr(0);
			State = 77;
			Match(THEN);
			State = 78;
			stmt();
			State = 81;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 79;
				Match(ELSE);
				State = 80;
				stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MyLangParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MyLangParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public WhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
	}

	[RuleVersion(0)]
	public WhileStmtContext whileStmt() {
		WhileStmtContext _localctx = new WhileStmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_whileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(WHILE);
			State = 84;
			expr(0);
			State = 85;
			Match(DO);
			State = 86;
			stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MyLangParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MyLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyLangParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MyLangParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MyLangParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_forStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(FOR);
			State = 89;
			Match(ID);
			State = 90;
			Match(ASSIGN);
			State = 91;
			expr(0);
			State = 92;
			Match(TO);
			State = 93;
			expr(0);
			State = 94;
			Match(DO);
			State = 95;
			stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(MyLangParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyLangParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyLangParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyLangParser.SEMI, 0); }
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_printStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(PRINT);
			State = 98;
			Match(LPAREN);
			State = 99;
			expr(0);
			State = 100;
			Match(RPAREN);
			State = 101;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MyLangParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MyLangParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_blockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(BEGIN);
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1053992L) != 0)) {
				{
				{
				State = 104;
				stmt();
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 110;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MulExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(MyLangParser.MUL, 0); }
		public MulExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterMulExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitMulExpr(this);
		}
	}
	public partial class StringExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MyLangParser.STRING, 0); }
		public StringExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterStringExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitStringExpr(this);
		}
	}
	public partial class DivExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MyLangParser.DIV, 0); }
		public DivExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterDivExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitDivExpr(this);
		}
	}
	public partial class IdExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MyLangParser.ID, 0); }
		public IdExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterIdExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitIdExpr(this);
		}
	}
	public partial class RelExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MyLangParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(MyLangParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MyLangParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(MyLangParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(MyLangParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(MyLangParser.NEQ, 0); }
		public RelExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterRelExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitRelExpr(this);
		}
	}
	public partial class SubExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MyLangParser.MINUS, 0); }
		public SubExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterSubExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitSubExpr(this);
		}
	}
	public partial class AddExprContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MyLangParser.PLUS, 0); }
		public AddExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
	}
	public partial class IntExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MyLangParser.INT, 0); }
		public IntExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterIntExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitIntExpr(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyLangParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyLangParser.RPAREN, 0); }
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterParenExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitParenExpr(this);
		}
	}
	public partial class RealExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(MyLangParser.REAL, 0); }
		public RealExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterRealExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitRealExpr(this);
		}
	}
	public partial class TernaryExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(MyLangParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyLangParser.COLON, 0); }
		public TernaryExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.EnterTernaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyLangParserListener typedListener = listener as IMyLangParserListener;
			if (typedListener != null) typedListener.ExitTernaryExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 113;
				Match(LPAREN);
				State = 114;
				expr(0);
				State = 115;
				Match(RPAREN);
				}
				break;
			case ID:
				{
				_localctx = new IdExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 117;
				Match(ID);
				}
				break;
			case INT:
				{
				_localctx = new IntExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 118;
				Match(INT);
				}
				break;
			case REAL:
				{
				_localctx = new RealExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 119;
				Match(REAL);
				}
				break;
			case STRING:
				{
				_localctx = new StringExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 120;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 146;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 144;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new MulExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 123;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 124;
						((MulExprContext)_localctx).op = Match(MUL);
						State = 125;
						expr(12);
						}
						break;
					case 2:
						{
						_localctx = new DivExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 126;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 127;
						((DivExprContext)_localctx).op = Match(DIV);
						State = 128;
						expr(11);
						}
						break;
					case 3:
						{
						_localctx = new AddExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 129;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 130;
						((AddExprContext)_localctx).op = Match(PLUS);
						State = 131;
						expr(10);
						}
						break;
					case 4:
						{
						_localctx = new SubExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 132;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 133;
						((SubExprContext)_localctx).op = Match(MINUS);
						State = 134;
						expr(9);
						}
						break;
					case 5:
						{
						_localctx = new RelExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 135;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 136;
						((RelExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4227858432L) != 0)) ) {
							((RelExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 137;
						expr(8);
						}
						break;
					case 6:
						{
						_localctx = new TernaryExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 138;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 139;
						Match(QUESTION);
						State = 140;
						expr(0);
						State = 141;
						Match(COLON);
						State = 142;
						expr(7);
						}
						break;
					}
					} 
				}
				State = 148;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,43,150,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,0,1,
		0,1,0,1,0,1,0,1,0,1,1,1,1,5,1,38,8,1,10,1,12,1,41,9,1,1,2,1,2,1,2,1,2,
		3,2,47,8,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,61,8,4,
		1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
		8,1,8,3,8,82,8,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,5,12,106,8,12,10,12,
		12,12,109,9,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		3,13,122,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,145,8,13,10,13,12,
		13,148,9,13,1,13,0,1,26,14,0,2,4,6,8,10,12,14,16,18,20,22,24,26,0,2,1,
		0,13,16,1,0,26,31,157,0,28,1,0,0,0,2,39,1,0,0,0,4,42,1,0,0,0,6,50,1,0,
		0,0,8,60,1,0,0,0,10,62,1,0,0,0,12,67,1,0,0,0,14,71,1,0,0,0,16,75,1,0,0,
		0,18,83,1,0,0,0,20,88,1,0,0,0,22,97,1,0,0,0,24,103,1,0,0,0,26,121,1,0,
		0,0,28,29,5,1,0,0,29,30,5,20,0,0,30,31,5,36,0,0,31,32,3,2,1,0,32,33,5,
		38,0,0,33,34,5,0,0,1,34,1,1,0,0,0,35,38,3,4,2,0,36,38,3,8,4,0,37,35,1,
		0,0,0,37,36,1,0,0,0,38,41,1,0,0,0,39,37,1,0,0,0,39,40,1,0,0,0,40,3,1,0,
		0,0,41,39,1,0,0,0,42,43,5,2,0,0,43,46,5,20,0,0,44,45,5,35,0,0,45,47,3,
		6,3,0,46,44,1,0,0,0,46,47,1,0,0,0,47,48,1,0,0,0,48,49,5,36,0,0,49,5,1,
		0,0,0,50,51,7,0,0,0,51,7,1,0,0,0,52,61,3,10,5,0,53,61,3,12,6,0,54,61,3,
		14,7,0,55,61,3,16,8,0,56,61,3,18,9,0,57,61,3,20,10,0,58,61,3,22,11,0,59,
		61,3,24,12,0,60,52,1,0,0,0,60,53,1,0,0,0,60,54,1,0,0,0,60,55,1,0,0,0,60,
		56,1,0,0,0,60,57,1,0,0,0,60,58,1,0,0,0,60,59,1,0,0,0,61,9,1,0,0,0,62,63,
		5,20,0,0,63,64,5,21,0,0,64,65,3,26,13,0,65,66,5,36,0,0,66,11,1,0,0,0,67,
		68,5,20,0,0,68,69,5,32,0,0,69,70,5,36,0,0,70,13,1,0,0,0,71,72,5,20,0,0,
		72,73,5,33,0,0,73,74,5,36,0,0,74,15,1,0,0,0,75,76,5,5,0,0,76,77,3,26,13,
		0,77,78,5,6,0,0,78,81,3,8,4,0,79,80,5,7,0,0,80,82,3,8,4,0,81,79,1,0,0,
		0,81,82,1,0,0,0,82,17,1,0,0,0,83,84,5,8,0,0,84,85,3,26,13,0,85,86,5,9,
		0,0,86,87,3,8,4,0,87,19,1,0,0,0,88,89,5,10,0,0,89,90,5,20,0,0,90,91,5,
		21,0,0,91,92,3,26,13,0,92,93,5,11,0,0,93,94,3,26,13,0,94,95,5,9,0,0,95,
		96,3,8,4,0,96,21,1,0,0,0,97,98,5,12,0,0,98,99,5,39,0,0,99,100,3,26,13,
		0,100,101,5,40,0,0,101,102,5,36,0,0,102,23,1,0,0,0,103,107,5,3,0,0,104,
		106,3,8,4,0,105,104,1,0,0,0,106,109,1,0,0,0,107,105,1,0,0,0,107,108,1,
		0,0,0,108,110,1,0,0,0,109,107,1,0,0,0,110,111,5,4,0,0,111,25,1,0,0,0,112,
		113,6,13,-1,0,113,114,5,39,0,0,114,115,3,26,13,0,115,116,5,40,0,0,116,
		122,1,0,0,0,117,122,5,20,0,0,118,122,5,17,0,0,119,122,5,18,0,0,120,122,
		5,19,0,0,121,112,1,0,0,0,121,117,1,0,0,0,121,118,1,0,0,0,121,119,1,0,0,
		0,121,120,1,0,0,0,122,146,1,0,0,0,123,124,10,11,0,0,124,125,5,24,0,0,125,
		145,3,26,13,12,126,127,10,10,0,0,127,128,5,25,0,0,128,145,3,26,13,11,129,
		130,10,9,0,0,130,131,5,22,0,0,131,145,3,26,13,10,132,133,10,8,0,0,133,
		134,5,23,0,0,134,145,3,26,13,9,135,136,10,7,0,0,136,137,7,1,0,0,137,145,
		3,26,13,8,138,139,10,6,0,0,139,140,5,34,0,0,140,141,3,26,13,0,141,142,
		5,35,0,0,142,143,3,26,13,7,143,145,1,0,0,0,144,123,1,0,0,0,144,126,1,0,
		0,0,144,129,1,0,0,0,144,132,1,0,0,0,144,135,1,0,0,0,144,138,1,0,0,0,145,
		148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,27,1,0,0,0,148,146,1,0,
		0,0,9,37,39,46,60,81,107,121,144,146
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
